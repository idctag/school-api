// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  MANAGER
}

model User {
  id         Int       @id @default(autoincrement())
  email      String?   @unique
  first_name String?
  last_name  String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  password   String
  phone      String?
  roles      Role[]
  status     Boolean   @default(true)
  birthday   DateTime?
  age        Int?
  residentId String?
  Student    Student[]
  Teacher    Teacher[]
  Manager    Manager[]
  Admin      Admin[]
}

model Student {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  gpa        Float
  credit     Float
  Teacher    Teacher?     @relation(fields: [teacherId], references: [id])
  teacherId  Int?
  Manager    Manager?     @relation(fields: [managerId], references: [id])
  managerId  Int?
  Class      Class?       @relation(fields: [classId], references: [id])
  classId    Int?
  Subject    Subject?     @relation(fields: [subjectId], references: [id])
  subjectId  Int?
  Attendance Attendance[]
  Grade      Grade[]
}

model Teacher {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  students   Student[]
  subjects   Subject[]
  Manager    Manager?     @relation(fields: [managerId], references: [id])
  managerId  Int?
  Class      Class[]
  Attendance Attendance[]
  Grade      Grade[]
}

model Manager {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  teachers Teacher[]
  subjects Subject[]
  students Student[]
}

model Admin {
  id     Int     @id @default(autoincrement())
  super  Boolean @default(false)
  user   User    @relation(fields: [userId], references: [id])
  userId Int
}

model Class {
  id        Int       @id @default(autoincrement())
  title     String
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  teacherId Int
  students  Student[]
}

model Subject {
  id         Int          @id @default(autoincrement())
  title      String
  Teacher    Teacher?     @relation(fields: [teacherId], references: [id])
  teacherId  Int?
  Manager    Manager?     @relation(fields: [managerId], references: [id])
  managerId  Int?
  students   Student[]
  date_from  DateTime
  date_to    DateTime
  credit     Float
  Attendance Attendance[]
  Grade      Grade[]
}

model Attendance {
  id        Int      @id @default(autoincrement())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId Int
  date      DateTime
}

model Grade {
  id        Int     @id @default(autoincrement())
  subject   Subject @relation(fields: [subjectId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])
  score     Float
  subjectId Int
  teacherId Int
  studentId Int
}
